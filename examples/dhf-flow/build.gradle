plugins {
  // This plugin allows you to create different environments
  // for your gradle deploy. Each environment is represented
  // by a gradle-${env}.properties file
  // See https://github.com/stevesaliman/gradle-properties-plugin
  // specify the env on the command line with:
  // gradle -PenvironmentName=x ...
  id 'net.saliman.properties' version '1.4.6'

  // This gradle plugin extends the ml-gradle plugin with
  // commands that make the Data Hub Framework do its magic
  id 'com.marklogic.ml-data-hub' version '4.0.1'
}

repositories {
  jcenter()
  mavenCentral()

  // needed for the mlcp dependencies
  maven {
    url {"http://developer.marklogic.com/maven2/"}
  }
}

configurations {
  mlcp
}

dependencies {
  // this magical line will include the Smart Mastering
  // libraries and deploy them alongside your code
  mlRestApi "com.marklogic.community:smart-mastering-core:${smartMasteringVersion}"

  // MLCP dependencies
  mlcp "com.marklogic:mlcp:9.0.7"
}

// Bugfix for DHF4 - see https://github.com/marklogic/marklogic-data-hub/pull/1416
ext {
  def loadModulesCommand = mlAppDeployer.getCommand("LoadModulesCommand")
  mlAppDeployer.getCommand("LoadHubModulesCommand").setExecuteSortOrder(loadModulesCommand.getExecuteSortOrder() - 1)
}

// Bugfix for DHF4
task deleteModuleTimestampsFile(type: Delete) {
  description = "Use this as mlDeleteModuleTimestampsFile doesn't seem to work with DHF4"
  delete "build/ml-javaclient-util/module-timestamps.properties"
}
mlReloadModules.dependsOn deleteModuleTimestampsFile
mlDeploy.dependsOn deleteModuleTimestampsFile



//////////////////////////////////////////////////////////////
// bug workaround!
// Use this until bug 910 gets fixed
// https://github.com/marklogic/marklogic-data-hub/issues/910
// task mlGradleLoadModules(type: com.marklogic.gradle.task.client.LoadModulesTask) {
//   dependsOn mlPrepareRestApiDependencies
//   mustRunAfter mlClearModulesDatabase
// }

// task mlGradleWatch(type: com.marklogic.gradle.task.client.WatchTask)
// task mlGradleDeleteModuleTimestampsFile(type: com.marklogic.gradle.task.DeleteModuleTimestampsFileTask)

// mlLoadModules.dependsOn mlGradleLoadModules
// mlWatch.dependsOn mlGradleWatch
// mlDeleteModuleTimestampsFile.dependsOn mlGradleDeleteModuleTimestampsFile
// end bug workaround
//////////////////////////////////////////////////////////////

// this task runs MLCP to ingest the CRM data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from a CRM system
task loadCRMData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/CRM"
  output_collections = "mdm-content,mdm-source://CRM,MDM"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the Oracle data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from an oracle database
task loadOracleData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/Oracle"
  output_collections = "mdm-content,mdm-source://Oracle,MDM"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the CSV_FILE data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from a CSV File
task loadCSVFileData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/CSV_FILE"
  output_collections = "mdm-content,mdm-source://CSV_FILE,MDM"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the Organization JSON data
task loadOrganizationSource1(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlFinalDbName
  port = Integer.parseInt(mlFinalPort, 10)
  input_file_path = "data/Organizations/Source1"
  input_file_type = "documents"
  document_type = "JSON"
  output_collections = "mdm-content,mdm-source://Source1,Organization"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.sjs"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=Organization,flow-name=OrgImportSource1"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the Organization JSON data
task loadOrganizationSource2(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlFinalDbName
  port = Integer.parseInt(mlFinalPort, 10)
  input_file_path = "data/Organizations/Source2"
  input_file_type = "documents"
  document_type = "JSON"
  output_collections = "mdm-content,mdm-source://Source2,Organization"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.sjs"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=Organization,flow-name=OrgImportSource2"
  args = ["-modules_root","/"]
}

// convenience task to group all 3 loading tasks into 1
task loadData {
  dependsOn loadCRMData
  dependsOn loadOracleData
  dependsOn loadCSVFileData
  dependsOn loadOrganizationSource1
  dependsOn loadOrganizationSource2
}

// import 2 thesaurus files so we can do name lookups
task importThesauri(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlFinalDbName
  input_file_path = "data/thesauri"
  output_collections = "mdm-thesauri,mdm-configuration"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data,'/mdm/config'"
}

// this is a convenience task to deploy match options
// easily from gradle
task deployMDMMatchOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  mustRunAfter mlLoadModules
  client = hubConfig.newFinalClient()
  resourceName = 'sm-match-options'
  method = 'POST'
  params = ['name': 'mdm-match-options']
  body = file('smart-mastering-config/mdm-match-options.xml').text
  mimeType = 'application/xml'
}

task deployOrgMatchOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  mustRunAfter mlLoadModules
  client = hubConfig.newFinalClient()
  resourceName = 'sm-match-options'
  method = 'POST'
  params = ['name': 'org-match-options']
  body = file('smart-mastering-config/org-match-options.xml').text
  mimeType = 'application/xml'
}

task deployMatchOptions {
  dependsOn deployMDMMatchOptions
  dependsOn deployOrgMatchOptions
}

// this is a convenience task to deploy merge options
// easily from gradle
task deployMDMMergeOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  mustRunAfter mlLoadModules
  client = hubConfig.newFinalClient()
  resourceName = 'sm-merge-options'
  method = 'POST'
  params = ['name': 'mdm-merge-options']
  body = file('smart-mastering-config/mdm-merge-options.xml').text
  mimeType = 'application/xml'
}

task deployOrgMergeOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  mustRunAfter mlLoadModules
  client = hubConfig.newFinalClient()
  resourceName = 'sm-merge-options'
  method = 'POST'
  params = ['name': 'org-merge-options']
  body = file('smart-mastering-config/org-merge-options.xml').text
  mimeType = 'application/xml'
}

task deployMergeOptions {
  dependsOn deployMDMMergeOptions
  dependsOn deployOrgMergeOptions
}

// this task runs the MDM => MDMHarmonize flow
// which moves the staging data into the Final DB
// This flow can also be run via QuickStart
task harmonize(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter importThesauri
  mustRunAfter deployMatchOptions
  mustRunAfter deployMergeOptions
  mustRunAfter loadCRMData
  mustRunAfter loadOracleData
  mustRunAfter loadCSVFileData
  mustRunAfter loadData

  entityName = "MDM"
  flowName = "MDMHarmonize"
  batchSize = 100
  threadCount = 4
}

// this is a convenience task to setup the example project
// for you completely
task loadCode {
  mustRunAfter mlDeploy
//  dependsOn mlReloadModules
  dependsOn deployMatchOptions
  dependsOn deployMergeOptions
  dependsOn importThesauri
  dependsOn loadData
  dependsOn harmonize
}

// this is a convenience task to setup the example project
// for you completely
task setupExample {
  dependsOn mlDeploy
  mustRunAfter mlDeploySecurity
  dependsOn mlDeploySecurity
  dependsOn loadCode
}

task runPersonMastering(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter importThesauri
  mustRunAfter deployMatchOptions
  mustRunAfter deployMergeOptions
  mustRunAfter loadCRMData
  mustRunAfter loadOracleData
  mustRunAfter loadCSVFileData
  mustRunAfter loadData
  mustRunAfter mlDeploy
  mustRunAfter loadCode
  mustRunAfter setupExample

  entityName = "MDM"
  flowName = "SmartMaster"
  batchSize = 100
  threadCount = 4
}

task runOrgMastering(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter importThesauri
  mustRunAfter deployMatchOptions
  mustRunAfter deployMergeOptions
  mustRunAfter loadCRMData
  mustRunAfter loadOracleData
  mustRunAfter loadCSVFileData
  mustRunAfter loadData
  mustRunAfter mlDeploy
  mustRunAfter loadCode
  mustRunAfter setupExample

  entityName = "Organization"
  flowName = "SmartMaster"
  sourceDB = "data-hub-FINAL"
  destDB = "data-hub-FINAL"
  batchSize = 100
  threadCount = 4
}

// a convenience task to run the Smart Mastering flow
task runMastering {
  dependsOn runPersonMastering
  dependsOn runOrgMastering
}

task clearStagingDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlStagingDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}
task clearFinalDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlFinalDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}

task clearJobDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlJobDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}

// convenience task to reset the demo
// by removing the data
task resetExample {
  dependsOn clearStagingDatabase
  dependsOn clearFinalDatabase
  dependsOn clearJobDatabase
}

/////////////////
// PROFILING
////////////////
import java.util.concurrent.TimeUnit
class TimingsListener implements TaskExecutionListener, BuildListener {
  private long startTime
  private timings = []

  @Override
  void beforeExecute(Task task) {
    startTime = System.nanoTime()
  }

  @Override
  void afterExecute(Task task, TaskState taskState) {
    timings.add([
      TimeUnit.MILLISECONDS.convert(System.nanoTime() -
         startTime, TimeUnit.NANOSECONDS),
      task.path
    ])
  }

  @Override
  void buildFinished(BuildResult result) {
    println "Task timings:"
    for (timing in timings)
      printf "%10.3fs  %s\n", (timing[0] / 1000), timing[1]
  }

  @Override
  void buildStarted(Gradle gradle) {}
  @Override
  void projectsEvaluated(Gradle gradle) {}
  @Override
  void projectsLoaded(Gradle gradle) {}
  @Override
  void settingsEvaluated(Settings settings) {}
}

if (project.hasProperty('profile')) {
  gradle.addListener new TimingsListener()
}
