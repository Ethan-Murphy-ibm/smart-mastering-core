buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "com.marklogic:ml-gradle:3.6.3"
  }
}

plugins {
  id 'net.saliman.properties' version '1.4.6'
  id 'com.marklogic.ml-data-hub' version '3.0.0'

  // for making REST calls
  id "org.tenne.rest" version "0.4.2"
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  // Needed for ml-unit-test-client dependency until it's available via jcenter()
  maven {
    url {"https://dl.bintray.com/rjrudin/maven/"}
  }

  // Needed for smart-mastering-core dependency until it's available via jcenter()
  maven {
    url {"https://dl.bintray.com/marklogic-community/Maven/"}
  }
}

configurations {
    // mlcp
    mlcp// {
    //   resolutionStrategy {
    //     force "xml-apis:xml-apis:1.4.01"
    //   }
    // }
}

dependencies {
  mlRestApi "com.marklogic.community:smart-mastering-core:${smartMasteringVersion}"

  // MLCP dependencies
  mlcp "com.marklogic:mlcp:9.0.5"
}

task importSchema(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlSchemasDbName
  input_file_path = "schema"
  output_collections = "mdm:schema"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/schema,''"
}

task importThesauri(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlFinalDbName
  input_file_path = "data/thesauri"
  output_collections = "mdm-thesauri,mdm-configuration"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data,'/mdm/config'"
}

// task oracleImport(type: ImportTask) {
//   dependsOn build
//   mustRunAfter importThesauri
//   mustRunAfter importSchema
//   configFile = "mdm-source-config/oracle-mdm-source-config.json"
// }

// task crmImport(type: ImportTask) {
//   dependsOn build
//   mustRunAfter importThesauri
//   mustRunAfter importSchema
//   configFile = "mdm-source-config/crm-mdm-source-config.json"
// }

// task caseMgmtImport(type: ImportTask) {
//   mustRunAfter importThesauri
//   mustRunAfter importSchema
//   configFile = "mdm-source-config/casemgmt-mdm-source-config.json"
// }

// task skoImport(type: ImportTask) {
//   mustRunAfter importThesauri
//   mustRunAfter importSchema
//   configFile = "mdm-source-config/casemgmt-mdm-source-config.json"
// }

// task sqlMdmImport(type: ImportTask) {
//   mustRunAfter importThesauri
//   mustRunAfter importSchema
//   configFile = "mdm-source-config/sql-mdm-source-config.json"
// }

task harmonize(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter importThesauri
  mustRunAfter importSchema
  // mustRunAfter csvImport
  // mustRunAfter oracleImport
  // mustRunAfter crmImport

  entityName = "MDM"
  flowName = "MDMHarmonize"
  batchSize = 100
  threadCount = 4
}

// this is a convenience task to deploy match options
// easily from gradle
task deployMatchOptions(type: org._10ne.gradle.rest.RestTask) {
  httpMethod = 'post'
  uri = 'http://' + mlHost + ':' + mlFinalPort + '/v1/resources/sm-match-options?rs:name=mlw-match'
  username = mlUsername
  password = mlPassword
  requestBody = file('smart-mastering-config/match-options/mdm-match-options.xml').text
  contentType = groovyx.net.http.ContentType.XML
  responseHandler = {}
}

// this is a convenience task to deploy merge options
// easily from gradle
task deployMergeOptions(type: org._10ne.gradle.rest.RestTask) {
  httpMethod = 'post'
  uri = 'http://' + mlHost + ':' + mlFinalPort + '/v1/resources/sm-merge-options?rs:name=mlw-merge'
  username = mlUsername
  password = mlPassword
  requestBody = file('smart-mastering-config/merge-options/mdm-merge-options.xml').text
  contentType = groovyx.net.http.ContentType.XML
  responseHandler = {}
}

// mlLoadModules.finalizedBy deployOptions

task prepDemo {
  dependsOn mlReloadModules
  dependsOn importThesauri
  // dependsOn importSchema
  // dependsOn csvImport
  // dependsOn crmImport
  // dependsOn oracleImport
  // dependsOn harmonize
  dependsOn deployMatchOptions
  dependsOn deployMergeOptions
}

//////////////////////////////////////////////////////////////
// bug workaround
// Use this until bug gets fixed
// https://github.com/marklogic/marklogic-data-hub/issues/910
task mlGradleLoadModules(type: com.marklogic.gradle.task.client.LoadModulesTask) {
  dependsOn mlPrepareRestApiDependencies
  mustRunAfter mlClearModulesDatabase
}

task mlGradleWatch(type: com.marklogic.gradle.task.client.WatchTask)
task mlGradleDeleteModuleTimestampsFile(type: com.marklogic.gradle.task.DeleteModuleTimestampsFileTask)

mlLoadModules.dependsOn mlGradleLoadModules
mlWatch.dependsOn mlGradleWatch
mlDeleteModuleTimestampsFile.dependsOn mlGradleDeleteModuleTimestampsFile
// end bug workaround
//////////////////////////////////////////////////////////////
