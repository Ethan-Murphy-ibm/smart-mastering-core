
plugins {
  // This plugin allows you to create different environments
  // for your gradle deploy. Each environment is represented
  // by a gradle-${env}.properties file
  // See https://github.com/stevesaliman/gradle-properties-plugin
  // specify the env on the command line with:
  // gradle -PenvironmentName=x ...
  id 'net.saliman.properties' version '1.4.6'

  // This gradle plugin extends the ml-gradle plugin with
  // commands that make the Data Hub Framework do its magic
  id 'com.marklogic.ml-data-hub'
}

import com.marklogic.client.DatabaseClientFactory;

repositories {
  jcenter()
  mavenCentral()

  // needed for the mlcp dependencies
  maven {
    url {"http://developer.marklogic.com/maven2/"}
  }
}

configurations {
  mlcp
}

dependencies {
  // this magical line will include the Smart Mastering
  // libraries and deploy them alongside your code
  mlBundle "com.marklogic.community:smart-mastering-core:${smartMasteringVersion}"

  // MLCP dependencies
  mlcp "com.marklogic:mlcp:9.0.9"
}

// this task runs MLCP to ingest the CRM data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from a CRM system
task loadCRMData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/CRM"
  output_collections = "mdm-content,mdm-source://CRM"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the Oracle data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from an oracle database
task loadOracleData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/Oracle"
  output_collections = "mdm-content,mdm-source://Oracle"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// this task runs MLCP to ingest the CSV_FILE data
// note that we have pre-processed this data for you
// to simplify the example so you can focus on the
// Smart Mastering parts. This represents data that
// originally came from a CSV File
task loadCSVFileData(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlStagingDbName
  port = Integer.parseInt(mlStagingPort, 10)
  input_file_path = "data/Persons/CSV_FILE"
  output_collections = "mdm-content,mdm-source://CSV_FILE"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data/Persons,''"
  transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
  transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
  transform_param = "entity-name=MDM,flow-name=MDMImport"
  args = ["-modules_root","/"]
}

// convenience task to group all 3 loading tasks into 1
task loadData {
  dependsOn loadCRMData
  dependsOn loadOracleData
  dependsOn loadCSVFileData
}

// import 2 thesaurus files so we can do name lookups
task importThesauri(type: com.marklogic.gradle.task.MlcpTask) {
  mustRunAfter mlLoadModules
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlFinalDbName
  input_file_path = "data/thesauri"
  output_collections = "mdm-thesauri,mdm-configuration"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*/data,'/mdm/config'"
}

// this is a convenience task to deploy match options
// easily from gradle
task deployMatchOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  doFirst {
    client = com.marklogic.client.DatabaseClientFactory.newClient(
      mlHost,
      Integer.parseInt(mlFinalPort),
      new DatabaseClientFactory.DigestAuthContext(mlAppAdminUsername, mlAppAdminPassword))
  }
  mustRunAfter mlLoadModules
  resourceName = 'sm-match-options'
  method = 'POST'
  params = ['name': 'mdm-match-options']
  body = file('smart-mastering-config/mdm-match-options.xml').text
  mimeType = 'application/xml'
}

// this is a convenience task to deploy merge options
// easily from gradle
task deployMergeOptions(type: com.marklogic.gradle.task.client.CallResourceTask) {
  doFirst {
    client = com.marklogic.client.DatabaseClientFactory.newClient(
      mlHost,
      Integer.parseInt(mlFinalPort),
      new DatabaseClientFactory.DigestAuthContext(mlAppAdminUsername, mlAppAdminPassword))
  }
  mustRunAfter mlLoadModules
  resourceName = 'sm-merge-options'
  method = 'POST'
  params = ['name': 'mdm-merge-options']
  body = file('smart-mastering-config/mdm-merge-options.xml').text
  mimeType = 'application/xml'
}

task loadCode {
  mustRunAfter mlDeploy
//  dependsOn mlReloadModules
  dependsOn deployMatchOptions
  dependsOn deployMergeOptions
  dependsOn importThesauri
  dependsOn loadData
}

// this is a convenience task to setup the example project
// for you completely
task setupExample {
  dependsOn mlDeploy
  mustRunAfter mlDeploySecurity
  dependsOn mlDeploySecurity
  dependsOn loadCode
}

// this task runs the MDM => MDMHarmonize flow
// which moves the staging data into the Final DB
// This flow can also be run via QuickStart
task harmonize(type: com.marklogic.gradle.task.RunFlowTask) {
  mustRunAfter importThesauri
  mustRunAfter deployMatchOptions
  mustRunAfter deployMergeOptions
  mustRunAfter loadCRMData
  mustRunAfter loadOracleData
  mustRunAfter loadCSVFileData
  mustRunAfter loadData

  entityName = "MDM"
  flowName = "MDMHarmonize"
  batchSize = 100
  threadCount = 4
}

mlPostDeploy.dependsOn mlDeployTriggers

task clearStagingDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlStagingDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}
task clearFinalDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlFinalDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}
task clearJobDatabase(type: com.marklogic.gradle.task.databases.ClearDatabaseTask) {
  doFirst {
    project.ext.database = project.properties.mlJobDbName
    project.ext.confirm = "true"
  }
  outputs.upToDateWhen { false }
}

// convenience task to reset the demo
// by removing the data
task resetExample {
  dependsOn clearStagingDatabase
  dependsOn clearFinalDatabase
  dependsOn clearJobDatabase
}
